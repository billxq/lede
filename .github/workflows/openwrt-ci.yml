name: Build OpenWrt

# 触发条件：手动触发（workflow_dispatch）或在 push 到主分支时触发
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    # 使用 GitHub 提供的 Ubuntu Runner 作为构建环境
    runs-on: ubuntu-latest
    env:
      FORCE_UNSAFE_CONFIGURE: 1

    steps:
      # Step 1: 检出仓库代码
      - name: Checkout source code
        uses: actions/checkout@v3

      # Step 2: 设置编译环境
      - name: Set up environment
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev \
          libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core \
          gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils \
          upx libelf-dev autoconf automake libtool autopoint device-tree-compiler gcc g++ python2.7 \
          python3 python3-setuptools python3-pip rsync

      # Step 3: 配置编译参数（此步骤可根据需要修改）
      - name: Update and install feeds
        run: |
          sed -i 's/#src-git helloworld/src-git helloworld/g' ./feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      # Step 4: 自定义配置（可选）
      # 你可以直接替换成自己的 .config 文件，或者进行定制化配置
      - name: Configure build
        run: |
          cp ./config.example .config
          make defconfig

      # Step 5: 编译固件
      - name: Build firmware
        run: |
          make download -j$(nproc) || make download -j1 V=s
          make -j$(nproc) || make -j1 V=s

      # Step 6: 保存编译结果
      # 将编译好的固件作为 GitHub Action 的输出
      - name: Upload firmware
        uses: actions/upload-artifact@v3
        with:
          name: openwrt-firmware
          path: bin/targets/
